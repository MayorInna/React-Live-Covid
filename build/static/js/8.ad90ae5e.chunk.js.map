{"version":3,"sources":["pages/Tables/index.js","components/Table/index.js"],"names":["TablesPage","useState","countries","setCountries","useEffect","a","fetch","then","response","json","data","map","country","name","value","countryInfo","iso2","cases","todayCases","deaths","todayDeaths","recovered","todayRecovered","active","critical","casesPerOneMillion","deathsPerOneMillion","tests","testsPerOneMillion","population","continent","oneCasePerPeople","oneDeathPerPeople","oneTestPerPeople","activePerOneMillion","recoveredPerOneMillion","criticalPerOneMillion","getCountriesData","document","title","className","style","textAlign","Table","styled","table"],"mappings":"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","file":"static/js/8.ad90ae5e.chunk.js","sourcesContent":["import React,{useState,useEffect} from 'react';\r\nimport {  Card } from '~/components/Card';\r\nimport { Table } from '~/components/Table';\r\n\r\nexport default function TablesPage() {\r\nconst [countries,setCountries] = useState([]);\r\n\r\nuseEffect(() => {\r\n  const getCountriesData = async () => {\r\n    fetch(\"https://disease.sh/v3/covid-19/countries\")\r\n      .then((response) => response.json()) // when it comes back with the response get the entire response and just take the json from it.\r\n      .then((data) => {\r\n        const countries = data.map((country) => ({\r\n            name: country.country,\r\n            value: country.countryInfo.iso2,\r\n            cases: country.cases,\r\n            todayCases: country.todayCases,\r\n            deaths: country.deaths,\r\n            todayDeaths: country.todayDeaths,\r\n            recovered: country.recovered,\r\n            todayRecovered: country.todayRecovered,\r\n            active: country.active,\r\n            critical: country.critical,\r\n            casesPerOneMillion: country.casesPerOneMillion,\r\n            deathsPerOneMillion: country.deathsPerOneMillion,\r\n            tests: country.tests,\r\n            testsPerOneMillion: country.testsPerOneMillion,\r\n            population: country.population,\r\n            continent: country.continent,\r\n            oneCasePerPeople: country.oneCasePerPeople,\r\n            oneDeathPerPeople: country.oneDeathPerPeople,\r\n            oneTestPerPeople: country.oneTestPerPeople,\r\n            activePerOneMillion: country.activePerOneMillion,\r\n            recoveredPerOneMillion: country.recoveredPerOneMillion,\r\n            criticalPerOneMillion: country.criticalPerOneMillion\r\n        }));\r\n        setCountries(countries);\r\n      });\r\n  };\r\n\r\n  getCountriesData();\r\n}, []);\r\n\r\n    useEffect(() => {\r\n        document.title = 'Covid Stats Table'\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"col-12 title\">\r\n                <h1>Tables</h1>\r\n            </div>\r\n            <div className=\"col-12 px-0\">\r\n                <Card className=\"red\">\r\n                    <div className=\"card-title\">\r\n                        <h3>Tables</h3>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <Table>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th className=\"col-1\">Country Code</th>\r\n                                    <th className=\"col-1\">Name</th>\r\n                                    <th className=\"col-1\">Cases</th>\r\n                                    <th className=\"col-1\">Today Cases</th>\r\n                                    <th className=\"col-1\">Deaths</th>\r\n                                    <th className=\"col-1\">Today Deaths</th>\r\n                                    <th className=\"col-1\">Recovered</th>\r\n                                    <th className=\"col-1\">Today recovered</th>\r\n                                    <th className=\"col-1\">Critical</th>\r\n                                    <th className=\"col-1\">Cases per million</th>\r\n                                    <th className=\"col-1\">Deaths per million</th>\r\n                                    <th className=\"col-1\">Tests per million</th>\r\n                                    <th className=\"col-1\">Population</th>\r\n                                    <th className=\"col-1\">Continent</th>\r\n                                    <th className=\"col-1\">One cases per people</th>\r\n                                    <th className=\"col-1\">One death per people</th>\r\n                                    <th className=\"col-1\">One Tests per people</th>\r\n                                    <th className=\"col-1\">Active per million</th>\r\n                                    <th className=\"col-1\">Recovered per million</th>\r\n                                    <th className=\"col-1\">Critical per million</th>\r\n\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {countries.map(country => (\r\n                                    <tr>\r\n                                        <td style={{ textAlign: 'center' }}>{ country.value }</td>\r\n                                        <td style={{ textAlign: 'center' }}>{ country.name }</td>\r\n                                        <td style={{ textAlign: 'center' }}>{ country.cases }</td>\r\n                                        <td style={{ textAlign: 'center' }}>{country.todayCases}</td>\r\n                                        <td style={{ textAlign: 'center' }}>{ country.deaths }</td>\r\n                                        <td style={{ textAlign: 'center' }}>{ country.todayDeaths }</td>\r\n                                        <td style={{ textAlign: 'center' }}>{ country.recovered }</td>\r\n                                        <td style={{ textAlign: 'center' }}>{ country.todayRecovered }</td>\r\n                                        <td style={{ textAlign: 'center' }}>{ country.critical }</td>\r\n                                        <td style={{ textAlign: 'center' }}>{ country.casesPerOneMillion }</td>\r\n                                        <td style={{ textAlign: 'center' }}>{ country.deathsPerOneMillion }</td>\r\n                                        <td style={{ textAlign: 'center' }}>{ country.testsPerOneMillion }</td>\r\n                                        <td style={{ textAlign: 'center' }}>{ country.population }</td>\r\n                                        <td style={{ textAlign: 'center' }}>{ country.continent }</td>\r\n                                        <td style={{ textAlign: 'center' }}>{ country.oneCasePerPeople }</td>\r\n                                        <td style={{ textAlign: 'center' }}>{ country.oneDeathPerPeople }</td>\r\n                                        <td style={{ textAlign: 'center' }}>{ country.oneTestPerPeople }</td>\r\n                                        <td style={{ textAlign: 'center' }}>{ country.activePerOneMillion }</td>\r\n                                        <td style={{ textAlign: 'center' }}>{ country.recoveredPerOneMillion }</td>\r\n                                        <td style={{ textAlign: 'center' }}>{ country.criticalPerOneMillion }</td>\r\n\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    </div>\r\n                </Card>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","import styled from 'styled-components';\r\n\r\nexport const Table = styled.table`\r\n  overflow-x: scroll;\r\n  width: 100%;\r\n  display: table;\r\n  border-collapse: collapse;\r\n  border-spacing: 1px;\r\n  border-color: grey;\r\n\r\n  @media screen and (max-width: 790px) {\r\n    display: block !important;\r\n    /* width: 100%; */\r\n    overflow-x: auto;\r\n    -webkit-overflow-scrolling: touch;\r\n  }\r\n\r\n  thead {\r\n    display: table-header-group;\r\n    vertical-align: middle;\r\n    border-color: inherit;\r\n\r\n    tr {\r\n      display: table-row;\r\n      vertical-align: inherit;\r\n      border-color: inherit;\r\n    }\r\n\r\n    th {\r\n      vertical-align: bottom;\r\n      border-bottom: 2px solid #dee2e6;\r\n      padding: .75rem;\r\n    }\r\n\r\n    font-size: 7px;\r\n    color: #444;\r\n  }\r\n\r\n  tbody {\r\n    font-size: 8px;\r\n    color: #464e5f;\r\n\r\n    display: table-row-group;\r\n    vertical-align: middle;\r\n    border-color: inherit;\r\n\r\n    td {\r\n      display: table-cell;\r\n      padding: .75rem;\r\n      vertical-align: top;\r\n      border-top: 1px solid #dee2e6;\r\n    }\r\n  }\r\n\r\n  .edit, .eraser, .info {\r\n    margin: 0 3px;\r\n    cursor: pointer;\r\n    font-size: 12px;\r\n    padding: 8px 10px;\r\n    border-radius: 60px;\r\n    color: #fff;\r\n    border: none;\r\n    font-weight: 400;\r\n    transition: all 0.2s;\r\n\r\n    &:hover {\r\n      filter: brightness(90%);\r\n    }\r\n  }\r\n`;\r\n"],"sourceRoot":""}