{"version":3,"sources":["api/API.js","components/Charts/index.js","components/Charts/Piechart.js","components/Country/index.js","pages/Cards/index.js"],"names":["url","fetchData","country","a","changeableUrl","axios","get","data","confirmed","recovered","deaths","lastUpdate","fetchDailyData","map","date","reportDate","total","fetchCountries","countries","name","Charts","useState","dailyData","setDailyData","useEffect","fetchAPI","lineChart","length","labels","Date","toLocaleDateString","month","day","datasets","label","borderColor","fill","backgroundColor","barChart","value","options","legend","display","title","text","className","styles","container","Piechart","PieChart","Countries","handleCountryChange","setCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","CardsPage","setData","countryPick","setCountryPick","document","fetchedData","Card"],"mappings":"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","file":"static/js/5.acdc1c0f.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = url;\r\n\r\n  if (country) {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n\r\n  try {\r\n    const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\r\n\r\n    return { confirmed, recovered, deaths, lastUpdate };\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n\r\n    return data.map(({ confirmed, deaths, reportDate: date }) => ({ confirmed: confirmed.total, deaths: deaths.total, date }));\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const { data: { countries } } = await axios.get(`${url}/countries`);\r\n\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};","import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyData } from \"../../api/API\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\n\r\nimport styles from \"./Charts.css\";\r\n\r\nconst Charts = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n\tconst [dailyData, setDailyData] = useState([]);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst fetchAPI = async () => {\r\n\t\t\tsetDailyData(await fetchDailyData());\r\n\t\t};\r\n\r\n\t\tfetchAPI();\r\n\t}, []);\r\n\r\n\tconst lineChart = dailyData.length ? (\r\n\t\t<Line\r\n\t\t\tdata={{\r\n\t\t\t\tlabels: dailyData.map(({ date }) => new Date(date).toLocaleDateString(\"en-US\", { month: 'long', day: 'numeric' })),\r\n\t\t\t\tdatasets: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdata: dailyData.map(({ confirmed }) => confirmed),\r\n\t\t\t\t\t\tlabel: \"Cases\",\r\n\t\t\t\t\t\tborderColor: \"#33daff\",\r\n\t\t\t\t\t\tfill: false,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdata: dailyData.map(({ deaths }) => deaths),\r\n\t\t\t\t\t\tlabel: \"Deaths\",\r\n\t\t\t\t\t\tborderColor: \"red\",\r\n\t\t\t\t\t\tbackgroundColor: \"rgba(255, 0, 0, 0.5)\",\r\n\t\t\t\t\t\tfill: false,\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t}}\r\n\t\t/>\r\n\t) : null;\r\n\r\n\tconst barChart = confirmed ? (\r\n\t\t<Bar\r\n\t\t\tdata={{\r\n\t\t\t\tlabels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n\t\t\t\tdatasets: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlabel: \"People\",\r\n\t\t\t\t\t\tbackgroundColor: [\r\n\t\t\t\t\t\t\t\"rgba(0, 0, 255, 0.5)\",\r\n\t\t\t\t\t\t\t\"rgba(0, 255, 0, 0.5)\",\r\n\t\t\t\t\t\t\t\"rgba(255, 0, 0, 0.5)\",\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tdata: [confirmed.value, recovered.value, deaths.value],\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t}}\r\n\t\t\toptions={{\r\n\t\t\t\tlegend: { display: false },\r\n\t\t\t\ttitle: { display: true, text: `Current state in ${country}` },\r\n\t\t\t}}\r\n\t\t/>\r\n\t) : null;\r\n\r\n\treturn (\r\n\t\t<div className={styles.container}>{country ? barChart : lineChart}</div>\r\n\t);\r\n};\r\n\r\nexport default Charts;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyData } from \"../../api/API\";\r\nimport { Pie } from 'react-chartjs-2';\r\nimport styles from \"./Charts.css\";\r\n\r\n\r\nconst Piechart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n\tconst [dailyData, setDailyData] = useState([]);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst fetchAPI = async () => {\r\n\t\t\tsetDailyData(await fetchDailyData());\r\n\t\t};\r\n\r\n\t\tfetchAPI();\r\n    }, []);\r\n    \r\n\r\nconst PieChart = dailyData.length ? (\r\n        <Pie\r\n        data={{\r\n\t\t\t\tlabels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n\t\t\t\tdatasets: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlabel: \"People\",\r\n\t\t\t\t\t\tbackgroundColor: [\r\n\t\t\t\t\t\t\t\"rgba(0, 0, 255, 0.5)\",\r\n\t\t\t\t\t\t\t\"rgba(0, 255, 0, 0.5)\",\r\n\t\t\t\t\t\t\t\"rgba(255, 0, 0, 0.5)\",\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tdata: [confirmed.value, recovered.value, deaths.value],\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t}}\r\n\t\t\toptions={{\r\n\t\t\t\tlegend: { display: false },\r\n\t\t\t\ttitle: { display: true, text: `Live Stat` },\r\n\t\t\t}}\r\n/>\r\n) : null;\r\n\r\n\treturn (\r\n\t\t<div className={styles.container}>{PieChart}</div>\r\n\t);\r\n};\r\n\r\nexport default Piechart;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\n\r\nimport { fetchCountries } from '../../api/API';\r\n\r\nimport styles from './Country.css';\r\n\r\nconst Countries = ({ handleCountryChange }) => {\r\n  const [countries, setCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setCountries(await fetchCountries());\r\n    };\r\n\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  return (\r\n    <FormControl className={styles.formControl}>\r\n      <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n        <option value=\"\">Global</option>\r\n        {countries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default Countries;","import React, {useState, useEffect } from 'react';\r\nimport Charts from \"~/components/Charts\";\r\nimport Piechart from \"~/components/Charts/Piechart\";\r\nimport Country from \"~/components/Country\";\r\nimport { fetchData } from \"~/api/API\";\r\nimport { Card } from '~/components/Card';\r\n\r\n\r\nexport default function CardsPage() {\r\nconst [data,setData] = useState({});\r\nconst [countryPick,setCountryPick] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        document.title = 'Charts'\r\n    }, []);\r\n\r\n    useEffect(()=>{\r\n        (async () => {\r\n        const fetchedData = await fetchData();\r\n        setData(fetchedData);\r\n    })()\r\n    },[]);\r\n\r\n   const handleCountryChange = async (countryPick) => {\r\n        const fetchedData = await fetchData(countryPick);\r\n        setData(fetchedData);\r\n        setCountryPick(countryPick);\r\n      };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"col-12 title\">\r\n                <h1>Charts Cards</h1>\r\n                <Country handleCountryChange={handleCountryChange} />\r\n            </div>\r\n            <div className=\"col-6 px-0\">\r\n                <Card>\r\n                    <div className=\"card-title\">\r\n                        <h3>Line Chart</h3>\r\n                    </div>\r\n                    <div className=\"card-body light-text\">\r\n                         <Charts data={data} country={countryPick} />\r\n                    </div>\r\n                </Card>\r\n            </div>\r\n            <div className=\"col-6 px-0\">\r\n                <Card>\r\n                    <div className=\"card-title\">\r\n                        <h3>Pie Chart</h3>\r\n                    </div>\r\n                    <div className=\"card-body light-text\">\r\n                    <Piechart data={data} />\r\n                    </div>\r\n                </Card>\r\n            </div>    \r\n        </>\r\n    );\r\n}\r\n"],"sourceRoot":""}